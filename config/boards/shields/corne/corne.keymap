/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define DEFAULT 0
#define SYMBOLS 1
#define NUMPAD  2
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1600  // default: 600

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        F24Tap: F24Tap {
            compatible = "zmk,behavior-tap-dance";
            label = "F24TAP";
            #binding-cells = <0>;
            bindings = <&kp LCTRL>, <&kp F24>;
        };
    };

    macros {
        ctrlaltdelete: ctrlaltdelete {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp LEFT_ALT>,
                <&macro_tap>,
                <&kp DEL>,
                <&macro_release>,
                <&kp LCTRL &kp LEFT_ALT>;

            label = "CTRLALTDELETE";
        };
    };

    combos {
        compatible = "zmk,combos";

        debug {
            bindings = <&to 5>;
            key-positions = <13 14 15 16>;
        };

        base {
            bindings = <&to 0>;
            key-positions = <19 20 21 22>;
        };

        code {
            bindings = <&to 7>;
            key-positions = <3 2 4 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 4 TAB  &kp Q  &kp W    &kp E     &kp R        &kp T      &kp Y  &kp U        &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &lt 2 S  &lt 1 D   &lt 4 F      &kp G      &kp H  &kp J        &kp K      &kp L    &kp SEMI  &kp RET
&kp LSHFT  &kp Z  &kp X    &kp C     &kp V        &kp B      &kp N  &kp M        &kp COMMA  &kp DOT  &kp FSLH  &kp APOS
                           &kp LGUI  &mo SYMBOLS  &F24Tap    &mo 6  &lt 3 SPACE  &kp RALT
            >;
        };

        symbols_layer {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R        &kp T         &kp AT     &kp LBRC       &kp RBRC          &kp MINUS  &kp EQUAL   &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F        &kp G         &kp HASH   &kp LPAR       &kp RPAR          &kp STAR   &kp DOLLAR  &kp RET
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V        &kp B         &kp GRAVE  &kp LBKT       &kp RBKT          &kp EXCL   &kp FSLH    &kp ESC
                         &kp LGUI  &mo SYMBOLS  &mo NUMPAD    &kp SPACE  &kp LESS_THAN  &kp GREATER_THAN
            >;
        };

        number_layer {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R        &kp T         &kp HASH   &kp N7  &kp N8    &kp N9  &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F        &kp G         &kp STAR   &kp N4  &kp N5    &kp N6  &kp SEMI  &ctrlaltdelete
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V        &kp B         &kp GRAVE  &kp N1  &kp N2    &kp N3  &kp FSLH  &kp ESC
                         &kp LGUI  &mo SYMBOLS  &mo NUMPAD    &kp SPACE  &kp N0  &kp RALT
            >;
        };

        mouse_layer {
            bindings = <
&trans  &trans          &mmv MOVE_UP    &mkp RCLK        &trans     &trans    &trans  &trans  &trans  &trans  &trans  &bt BT_NXT
&trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp LCLK  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans          &trans           &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans           &trans     &trans    &trans  &trans  &trans
            >;
        };

        arrows {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans    &kp UP    &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT  &kp DOWN  &kp RIGHT_ARROW  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans    &trans    &trans           &trans  &trans
                        &trans  &trans  &trans    &trans  &trans    &trans
            >;
        };

        debug {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E    &kp R    &kp T      &kp Y   &kp U   &kp I      &kp O    &kp P     &trans
&kp LCTRL  &kp A  &kp S  &kp D    &kp F    &kp G      &kp H   &kp J   &kp K      &kp L    &kp SEMI  &trans
&kp LSHFT  &kp Z  &kp X  &kp C    &kp V    &kp B      &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans
                         &kp F10  &kp F11  &kp F12    &kp F5  &trans  &trans
            >;
        };

        Function {
            bindings = <
&trans  &trans  &trans  &trans   &trans   &trans     &trans  &kp F7  &kp F8  &kp F9  &trans  &trans
&trans  &trans  &trans  &trans   &trans   &trans     &trans  &kp F4  &kp F5  &kp F6  &trans  &trans
&trans  &trans  &trans  &trans   &trans   &trans     &trans  &kp F1  &kp F2  &kp F3  &trans  &trans
                        &kp F10  &kp F11  &kp F12    &trans  &trans  &trans
            >;
        };

        coding {
            bindings = <
&lt 4 TAB  &kp Q  &kp W    &kp E         &kp R        &kp T      &kp Y  &kp U        &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &lt 2 S  &lt 1 D       &lt 4 F      &kp G      &kp H  &kp J        &kp K      &kp L    &kp SEMI  &kp RET
&kp LSHFT  &kp Z  &kp X    &kp C         &kp V        &kp B      &kp N  &kp M        &kp COMMA  &kp DOT  &kp FSLH  &kp APOS
                           &kp LEFT_ALT  &mo SYMBOLS  &F24Tap    &mo 6  &lt 3 SPACE  &kp RALT
            >;
        };
    };
};
